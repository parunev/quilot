[2025-08-02 16:17:44] [INFO] [SystemAudioOutputService.<init>()] Found saved audio device: System Audio + BlackHole. Attempting to select it.
[2025-08-02 16:17:44] [INFO] [SystemAudioInputService.<init>()] Found saved audio input device: BlackHole 2ch. Attempting to select it.
[2025-08-02 16:17:44] [INFO] [SystemAudioInputService.configureDevice()] Successfully opened device 'BlackHole 2ch' with default format.
[2025-08-02 16:17:44] [INFO] [SystemAudioInputService.saveSelectedDeviceName()] Saved selected input device 'BlackHole 2ch' to preferences.
[2025-08-02 16:17:44] [INFO] [CredentialManager.<init>()] CredentialManager initialized.
[2025-08-02 16:17:44] [INFO] [SpeechToTextSettingsManager.<init>()] SpeechToTextSettingsManager initialized.
[2025-08-02 16:17:44] [INFO] [CredentialManager.loadGoogleCloudCredentialPath()] Loaded Google Cloud credential path: /Users/parunev/Desktop/quilot-1b72c432fc2c.json
[2025-08-02 16:17:44] [INFO] [AISettingsManager.<init>()] AISettingsManager initialized.
[2025-08-02 16:17:44] [INFO] [VertexAIService.<init>()] VertexAIService initialized. Client initialization deferred.
[2025-08-02 16:17:45] [INFO] [VertexAIService.initializeClient()] Vertex AI client created successfully for model: gemini-2.5-flash
[2025-08-02 16:17:45] [INFO] [CredentialManager.loadGoogleCloudCredentialPath()] Loaded Google Cloud credential path: /Users/parunev/Desktop/quilot-1b72c432fc2c.json
[2025-08-02 16:17:45] [INFO] [GoogleCloudSpeechToTextService.<init>()] GoogleCloudSpeechToTextService instantiated. Client initialization deferred.
[2025-08-02 16:17:45] [WARN] [GoogleCloudSpeechToTextService.stopStreamingRecognition()] No active streaming recognition to stop.
[2025-08-02 16:17:45] [INFO] [GoogleCloudSpeechToTextService.initializeClient()] Google Cloud SpeechClient created successfully.
[2025-08-02 16:17:45] [INFO] [AudioDeviceDiscoverer.logDiscoverySummary()] Discovered 7 audio output device(s).
[2025-08-02 16:17:45] [INFO] [SystemAudioInputService.logDeviceDiscoveryResult()] Found 6 audio input device(s).
[2025-08-02 16:17:45] [INFO] [AudioInputSettingsPanelBuilder.populateInputDevices()] Available Input Devices detected by SystemAudioInputService: [Default Audio Device, Mmpâ€™s iPhone Microphone, Background Music, Background Music (UI Sounds), BlackHole 2ch, MacBook Pro Microphone]
[2025-08-02 16:17:45] [INFO] [MainFrame.<init>()] Quilot UI initialized.
[2025-08-02 16:18:31] [INFO] [SystemAudioInputService.captureAudioLoop()] Audio capture thread started.
[2025-08-02 16:18:31] [INFO] [SystemAudioInputService.startRecording()] Recording started.
[2025-08-02 16:18:31] [INFO] [ElapsedTimerManager.startElapsedTimer()] Elapsed time timer started.
[2025-08-02 16:18:31] [INFO] [GoogleCloudSpeechToTextService.startStreamingRecognition()] Starting new streaming recognition session...
[2025-08-02 16:18:31] [INFO] [GoogleCloudSpeechToTextService$1.onStart()] Streaming recognition response observer started.
[2025-08-02 16:18:31] [INFO] [GoogleCloudSpeechToTextService.startStreamingRecognition()] Streaming recognition session started successfully.
[2025-08-02 16:18:37] [INFO] [GoogleCloudSpeechToTextService$1.onResponse()] Streaming STT Result: "What is an abstract class in Java?" (Final: true)
[2025-08-02 16:18:37] [INFO] [VertexAIService.lambda$generateResponse$0()] Sending prompt to AI: What is an abstract class in Java?
[2025-08-02 16:18:45] [INFO] [VertexAIService.lambda$generateResponse$1()] Response: candidates {
  content {
    role: "model"
    parts {
      text: "An abstract class in Java is a class that cannot be instantiated directly. It serves as a blueprint for other classes. An abstract class can contain both abstract methods and concrete methods.\n\nAbstract methods are declared without an implementation. Subclasses extending an abstract class must provide implementations for"
    }
  }
}
usage_metadata {
  8: 1
}
11: "gemini-2.5-flash"
12: {
  1: 1754140718
  2: 599676000
}
13: "LhCOaPzMJK2O1PIP8aWRcQ"

[2025-08-02 16:18:46] [INFO] [VertexAIService.lambda$generateResponse$1()] Response: candidates {
  content {
    role: "model"
    parts {
      text: " all inherited abstract methods, unless the subclass itself is declared abstract.\n\nConcrete methods within an abstract class have a full implementation. These methods can be inherited and used by subclasses as is.\n\nAbstract classes can also have constructors. While you cannot create an object of an abstract class using new, its constructor is called when an object of"
    }
  }
}
usage_metadata {
  8: 1
}
11: "gemini-2.5-flash"
12: {
  1: 1754140718
  2: 599676000
}
13: "LhCOaPzMJK2O1PIP8aWRcQ"

[2025-08-02 16:18:46] [INFO] [VertexAIService.lambda$generateResponse$1()] Response: candidates {
  content {
    role: "model"
    parts {
      text: " a concrete subclass is created.\n\nThe primary purpose of an abstract class is to define a common interface and provide a partial implementation for a set of related classes. It enforces a structure where certain methods must be implemented by its concrete subclasses, promoting code reusability and maintaining a consistent design across a class hierarchy."
    }
  }
  finish_reason: STOP
}
usage_metadata {
  prompt_token_count: 46
  candidates_token_count: 182
  total_token_count: 1312
  8: 1
  9: {
    1: 1
    2: 46
  }
  11: {
    1: 1
    2: 182
  }
  14: 1084
}
11: "gemini-2.5-flash"
12: {
  1: 1754140718
  2: 599676000
}
13: "LhCOaPzMJK2O1PIP8aWRcQ"

[2025-08-02 16:18:46] [INFO] [VertexAIService.lambda$generateResponse$0()] AI responded: An abstract class in Java is a class that cannot be instantiated directly. It serves as a blueprint for other classes. An abstract class can contain both abstract methods and concrete methods.

Abstract methods are declared without an implementation. Subclasses extending an abstract class must provide implementations for all inherited abstract methods, unless the subclass itself is declared abstract.

Concrete methods within an abstract class have a full implementation. These methods can be inherited and used by subclasses as is.

Abstract classes can also have constructors. While you cannot create an object of an abstract class using new, its constructor is called when an object of a concrete subclass is created.

The primary purpose of an abstract class is to define a common interface and provide a partial implementation for a set of related classes. It enforces a structure where certain methods must be implemented by its concrete subclasses, promoting code reusability and maintaining a consistent design across a class hierarchy.
[2025-08-02 16:18:48] [INFO] [SystemAudioInputService.captureAudioLoop()] Audio capture thread stopped.
[2025-08-02 16:18:48] [INFO] [SystemAudioInputService.stopRecording()] Recording stopped.
[2025-08-02 16:18:48] [INFO] [ElapsedTimerManager.stopElapsedTimer()] Elapsed time timer stopped.
[2025-08-02 16:18:48] [INFO] [GoogleCloudSpeechToTextService.stopStreamingRecognition()] Stopping streaming recognition session.
[2025-08-02 16:18:48] [INFO] [GoogleCloudSpeechToTextService.closeClientStream()] Executor service for streaming recognition shut down.
[2025-08-02 16:18:48] [INFO] [GoogleCloudSpeechToTextService$1.onComplete()] Streaming recognition completed.
[2025-08-02 16:18:48] [INFO] [SpeechToTextService$StreamingRecognitionListener.onStreamClosed()] Streaming STT session closed.
